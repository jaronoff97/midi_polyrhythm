import argparse
import functools
import math


def get_new_ratios(prev_ratios):
    to_return = set()
    for r in prev_ratios:
        ratio_to_add = r
        while ratio_to_add > 2:
            ratio_to_add = ratio_to_add / 2
        to_return.add(ratio_to_add)
    return(sorted(to_return))


def write_to_file(filename, ratios, cents):
    with open(filename, "w") as f:
        f.write("!\nAutogenerated SCL file for ratios: {0}\n!\n".format(ratios))
        f.writelines(["{0}\n".format(x) for x in cents])


def main(ratios, filename):
    g = functools.reduce(lambda x, y: x * y, ratios)
    L = [int(g / a) for a in ratios]
    Ls = [[x for x in range(l, g, l)] for l in L]
    flat_Ls = [item for sublist in Ls for item in sublist]
    composite_grid = list(sorted(set(flat_Ls)))
    low_CG = min(composite_grid)
    composite_grid.insert(0, 0)
    spaces_in_grid = [b - a for a, b in zip(composite_grid, composite_grid[1:])]
    spaces_in_grid_corrected = list(reversed(sorted(set(spaces_in_grid))))
    ratios_non_corrected = [(low_CG / x) for x in spaces_in_grid_corrected]
    sorted_new_ratios = get_new_ratios(ratios_non_corrected)
    print(sorted_new_ratios)
    CENTS = [(1200 * math.log10(x) / math.log10(2)) for x in sorted_new_ratios]
    print(CENTS)
    CENTS.remove(0)
    write_to_file(filename, ratios, CENTS)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("ratios", type=str, help="The starting values, comma separateed. EX: 1,2,3,4")
    parser.add_argument("--filename", type=str, help="Output SCL file", default="output.scl")
    args = parser.parse_args()
    main([int(x) for x in args.ratios.split(",")], args.filename)
